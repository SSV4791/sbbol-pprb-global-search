---
kind: ConfigMap
apiVersion: v1
metadata:
  name: cm-app-sink-properties-{{ canary_suffix }}
  labels:
    templates/type: app
data:
  application.properties: |-
    server.port=8080
    server.shutdown=graceful

    spring.main.banner-mode=off
    spring.application.name={{ os_project.name }}-sink
    spring.profiles.active=default

    server.servlet.encoding.charset=UTF-8
    server.servlet.encoding.force=true
    server.servlet.encoding.enabled=true
    server.servlet.context-path=/sink
    server.tomcat.uri-encoding=UTF-8

    management.endpoints.enabled-by-default=true
    management.endpoints.web.exposure.include=health,prometheus
    management.endpoints.jmx.exposure.include=*
    management.endpoint.health.probes.enabled=true
    management.endpoint.health.show-details=always
    management.metrics.tags.application={{ os_project.name }}-sink
    management.metrics.export.prometheus.enabled=true

    # Kafka Consumer for searchable entity
    global_search.kafka.bootstrap-servers={% for entry in int_entry.pprb.kafka %}{{ entry.ip }}:{{ entry.port }}{% if not loop.last %},{% endif %}{% endfor %}
    global_search.kafka.consumer.enable={{ app.global_search.kafka.consumer.enable | default('false') }}
    global_search.kafka.consumer.topic={{ app.global_search.kafka.consumer.topic | default('DIGITALGLOBALSEARCH.CI04756650_INDEXINGENTITYEVENT.V1') }}
    global_search.kafka.consumer.session-timeout={{ app.global_search.kafka.consumer.session_timeout | default('20000') }}
    global_search.kafka.consumer.poll_time={{ app.global_search.kafka.consumer.poll_time | default('10000') }}
    global_search.kafka.consumer.client-id={{ app.global_search.kafka.consumer.client_id | default('sbbol_pprb_global_search_consumer') }}
    global_search.kafka.consumer.group-id={{ app.global_search.kafka.consumer.group_id | default('SBBOL_PPRB_GLOBAL_SEARCH_INDEXING_GROUP_ID') }}
    global_search.kafka.consumer.enable-auto-commit={{ app.global_search.kafka.consumer.enable_auto_commit | default('true') }}
    global_search.kafka.consumer.auto-offset-reset={{ app.global_search.kafka.consumer.auto_offset_reset | default('latest') }}
    global_search.kafka.consumer.key-deserializer={{ app.global_search.kafka.consumer.key_deserializer | default('org.apache.kafka.common.serialization.StringDeserializer') }}
    global_search.kafka.consumer.value-deserializer={{ app.global_search.kafka.consumer.value_deserializer | default('org.springframework.kafka.support.serializer.JsonDeserializer') }}

    # Application Journal
    appjournal.moduleId=pprb4-digital-{{ os_project.name }}

{% for entry in integration_entries | flatten %}
{% if entry.ci is defined and entry.health_path is defined %}
    health.http.endpoint[{{ entry.ci }}_{{ entry.name }}].url=http://{{ entry.host }}{{ ':' ~ entry.istio_mesh_port if entry.istio_mesh_port is defined }}{{ entry.health_path }}
{% endif %}
{% endfor %}
  jvm-arguments: |-
